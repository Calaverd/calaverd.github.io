extends ../componentes/post_layout.pug
block prepend head
  - date     = "2020-03-11 09:00"
  - title    = "Cambio de paleta en Löve 2D"
  - subtitle = "sin usar shaders"
  - lang     = "es"
  - type     = 'post'
  - thumbnail = 'rsc/t_palette_swap/palette_swap.gif'
  - tags     = ["love2d","tutorial"]
  - key      = "d20200310l"
  - status   = "published"
block append meta
  meta( property="og:image"     content="https://calaverd.github.io/rsc/t_palette_swap/palette_swap.gif" )
block encabezado
  img( src="../rsc/t_palette_swap/head.webp" alt="Algunos circulos que seran utilizados como ejemplo después." )
block append content 
  p Cambiar el color de una imagen puede ser una forma muy útil de reutilizar un recurso sin aumentar el tamaño en disco del juego. Es posible cambiar el color de las imágenes utilizando las capacidades de #[span.code ImageData] para acceder a los píxeles directamente, ya sea para leer los colores como para cambiarlos.

  .img-captioned
    img(src="../rsc/t_palette_swap/palette_swap.gif" alt="Animación que demuestra lo que se puede hacer con cambiar la paleta.")
    span Animación que demuestra lo que se puede hacer con cambiar la paleta.
  
  p El algoritmo consiste en cargar a la memoria nuestra imagen como un objeto de tipo  #[span.code ImageData], en el cual no haremos cambios y solo vamos a usar como un  #[i "mapa" ] para saber que color se supone que debemos utilizar, por eso lo llamaremos #[span.code image_map]. También creamos una imagen de las mismas dimensiones donde vamos a escribir todos los cambios que hagamos, a esta la llamaremos #[span.code image_data] #[a.cite#q1(href="#nt1") 1].

  .img-captioned
    img(src="../rsc/t_palette_swap/ima.png", alt="La imagen que es utilizada como mapa, notese los diferentes colores.")
    span La imagen que es utilizada como mapa, notese los diferentes colores.

  p Hay que cargar una imagen que contiene las paletas a utilizar, que sera #[span.code palette_data], donde cada franja horizontal de un píxel de alto es una paleta:

  img(src="../rsc/t_palette_swap/palette.png", alt="Una imagen con varias bandas de diferentes colores.")

  pre.language-lua.line-numbers
    code
      | image_map = love.image.newImageData('ima.png')
      | image_data = love.image.newImageData( image_map:getWidth(), image_map:getHeight())
      | palette_data = love.image.newImageData('palette.png')
  
  p También debemos calcular el numero máximo de paletas (#[span.code max_palettes]) que podemos utilizar, este sera igual al tamaño vertical de la imagen donde guardamos las paletas. 

  pre.language-lua.line-numbers
    code max_palettes = palette_data:getHeight()

  p Ahora creamos una tabla donde veremos a que cada columna de la primera fila de imagen de paletas se corresponde cada color que compone la primera paleta. A esta tabla la llamaremos #[span.code look_up_color_table]. Crearemos una cadena que nos servirá de #[span.code id] para identificar a cada color rápidamente.

  pre.language-lua.line-numbers
    code
      | look_up_color_table = {}
      | local col = palette_data:getWidth()
      | local i = 0
      | while i < col do
      |     local r,g,b,a = palette_data:getPixel(i,0)
      |     --El id es creado usando un valor similar al hexadecimal
      |     local id = ("%X_%X_%X_%X"):format(
      |                           math.floor((o_r)*255),
      |                           math.floor((o_g)*255),
      |                           math.floor((o_b)*255),
      |                           math.floor((o_a)*255)
      |                           )
      |     look_up_color_table[id] = i
      |     i=i+1
      | end

  p Fijamos la paleta que queremos usar y cambiamos los colores de #[span.code image_data].

  pre.language-lua.line-numbers
    code
      | use_palette = 1
      | changePalete()

  p Lo que ocurre dentro de la función #[span.code changePalete()], es que llamamos al método #[span.code mapPixel()] del objeto #[span.code ImageData]. #[span.code mapPixel()] nos permite mandar una función que se ejecutara por cada uno de los píxeles que componen el objeto, en este caso, la función con la cual cambiamos los colores.
  p Después, como los objetos de tipo #[span.code ImageData] no pueden ser dibujados creamos una imagen para poder dibujar en pantalla, y le decimos que queremos que se dibuje nítida.

  pre.language-lua.line-numbers
    code
      | function changePalete()
      |     image_data:mapPixel(changeColors)
      |     image = love.graphics.newImage(image_data)
      |     image:setFilter('nearest','nearest')
      | end
  
  p Ahora, es en la función #[span.code changeColors()] donde ocurre todo.

  .img-captioned
    img(src="../rsc/t_palette_swap/algoritmo.png", alt="Descripción grafica del algoritmo paso por paso.")
    span Descripción grafica del algoritmo paso por paso.

  p Primero recibimos las coordenadas  #[i (x,y) ] del color que queremos cambiar, buscamos que color es en #[span.code image_map] con el método #[span.code getPixel(x,y)], después transformamos ese color a un #[span.code id], con el cual accedemos a la tabla #[span.code look_up_color_table], que nos regresa un numero de columna. Con el numero de #[span.code use_palette] que es igual al numero de la fila, y ya sabiendo la columna, tomamos ese color de nuestra paleta, y lo regresamos para colocado en las coordenadas  #[i (x,y) ] en #[span.code image_data]

  pre.language-lua.line-numbers
    code
      | function changeColors(x, y, r,g,b,a)
      |     local o_r,o_g,o_b,o_a = image_map:getPixel(x,y)
      |     local id = ("%X_%X_%X_%X"):format(
      |                           math.floor((o_r)*255),
      |                           math.floor((o_g)*255),
      |                           math.floor((o_b)*255),
      |                           math.floor((o_a)*255)
      |                           )
      |     --check if the color exist on the table
      |     if look_up_color_table[id] then
      |         --if exist, then get the color on the palete 
      |         local col = look_up_color_table[id]
      |         local row = use_palette-1
      |         return palette_data:getPixel(col,row)
      |     end
      |     --else, do nothing, return the original color
      |     return r, g, b, a
      | end

  p Por cada vez que cambiemos la paleta de la imagen, solo necesitamos establecer cuál es la fila correspondiente y cambiarla.

  pre.language-lua.line-numbers
    code
      | use_palette = 3 
      | changePalete()

  p Ojo, una desventaja de este método sin sombreadores, es el hecho de que cambian las paletas,  #[b  cuanto más grande sea el área a cambiar, esto será más lento de manera exponencial  ]

  p Eso seria todo, puedes descargar el archivo  #[b #[i .zip ] ] #[a(href="../rsc/t_palette_swap/palette_swap.zip") justo aquí ] y revisarlo por ti mismo. Puedes usar las flechas para cambiar entre paletas.

  .notes Notas:
  p.footnote#nt1
    a(href="#q1") [1] 
    | Cuando creamos un objeto #[span.code ImageData] usando #[span.code love.image.newImageData()], todos los valores RGBA de los píxeles son  #[i (0,0,0,0) ] 

  .key.idiom( lang="en" value="/post/2020-03-11-palette-swap-on-love-2d.html" aria-hidden="true")